// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/LavaJover/shvark-sso-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

type TokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenService) EXPECT() *TokenService_Expecter {
	return &TokenService_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: user
func (_m *TokenService) GenerateAccessToken(user *domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type TokenService_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - user *domain.User
func (_e *TokenService_Expecter) GenerateAccessToken(user interface{}) *TokenService_GenerateAccessToken_Call {
	return &TokenService_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", user)}
}

func (_c *TokenService_GenerateAccessToken_Call) Run(run func(user *domain.User)) *TokenService_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *TokenService_GenerateAccessToken_Call) Return(_a0 string, _a1 error) *TokenService_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateAccessToken_Call) RunAndReturn(run func(*domain.User) (string, error)) *TokenService_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRefreshToken provides a mock function with given fields: user
func (_m *TokenService) GenerateRefreshToken(user *domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type TokenService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - user *domain.User
func (_e *TokenService_Expecter) GenerateRefreshToken(user interface{}) *TokenService_GenerateRefreshToken_Call {
	return &TokenService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", user)}
}

func (_c *TokenService_GenerateRefreshToken_Call) Run(run func(user *domain.User)) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.User))
	})
	return _c
}

func (_c *TokenService_GenerateRefreshToken_Call) Return(_a0 string, _a1 error) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_GenerateRefreshToken_Call) RunAndReturn(run func(*domain.User) (string, error)) *TokenService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: token
func (_m *TokenService) ValidateAccessToken(token string) (string, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type TokenService_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - token string
func (_e *TokenService_Expecter) ValidateAccessToken(token interface{}) *TokenService_ValidateAccessToken_Call {
	return &TokenService_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", token)}
}

func (_c *TokenService_ValidateAccessToken_Call) Run(run func(token string)) *TokenService_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenService_ValidateAccessToken_Call) Return(userID string, err error) *TokenService_ValidateAccessToken_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *TokenService_ValidateAccessToken_Call) RunAndReturn(run func(string) (string, error)) *TokenService_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
